scalar Date
scalar LocalDate
scalar LocalDateTime
scalar BigDecimal
type Message {
    value: String
}
enum ShipmentType {
    PURCHASE
    CUSTOMER
    TRANSFER
    PURCHASERETURN
    CUSTOMERRETURN
    TRANSIT
}
enum ShipmentStatus {
    PENDING
    IN_TRANSIT
    RECEIVED
    DELIVERED
    CANCELED
    FAILED
    PROCESSING
    ACCEPTED
    SCHEDULED
    CLOSED
    ARRIVED
}
enum PackageType {
    BADALS14X18BAG
    DHLFLYER
    DHLFLYERBIG
    BOX
    TUBE
    NONSTANDARD
}

type PurchaseShipment {
    shipmentItemId: Int
    purchaseItemId: Int
    purchaseId: Int
    quantity: BigDecimal
}

input PurchaseShipmentInput {
    shipmentItemId: Int
    purchaseItemId: Int
    quantity: BigDecimal
    purchaseId: Long
    __typename: String
}

type Merchant {
    id: ID
    name: String
}
type Customer {
    id: ID!
    firstname: String
    lastname: String
    email: String
    mobile: String
}

type ShipmentItem {
    id: ID
    sequence: Int
    quantity: BigDecimal
    description: String
    shipmentId: Long
    productId: Long
    image: String
    purchaseShipments: [PurchaseShipment]
    from: Long
    price: BigDecimal
}

type Shipment {
    id: ID
    estimatedShipDate: LocalDate
    estimatedReadyDate: LocalDate
    estimatedArrivalDate: LocalDate
    estimatedShipCost: BigDecimal
    actualShipCost: BigDecimal
    latestCancelDate: LocalDate
    handlingInstructions: String
    reference: String
    trackingNum: String
    trackingLink: String
    shipmentMethod: String
    shipmentType: ShipmentType
    shipmentStatus: ShipmentStatus
    #shipmentItems: [ShipmentItem]
    customerId: Long
    merchantId: Long
    pkgs: [Pkg]
    shipmentItems: [ShipmentItem]
    customerFirstName: String
    customerLastName: String
    merchantName: String
}

type ShipmentReceipt {
    id: ID
    receivedDate: LocalDate
    accepted: BigDecimal
    rejected: BigDecimal
    rejectReason: String
    productId: Long
}

input ShipmentInput {
    reference: String
    trackingNum: String
    shipmentMethod: String
    shipmentType: ShipmentType
    shipmentStatus: ShipmentStatus
    merchantId: Long
    pkgCount: Int
    handlingInstructions: String
}

input ShipmentItemInput {
    sequence: Int
    quantity: BigDecimal
    description: String
    shipmentId: Long
    productId: Long
    image: String
    purchaseShipments: [PurchaseShipmentInput]
    from: Long
    price: BigDecimal
}

input PackagingContentInput {
    shipmentItemId: Long
    pkgId: Long
    quantity: BigDecimal
}

type Pkg {
    id: ID
    length: BigDecimal
    width: BigDecimal
    height: BigDecimal
    weight: BigDecimal
    packageType: PackageType
    shipmentItems: [ShipmentItem]
}

type Inventory {
    productId: Long
    title: String
    sku: String
    received: BigDecimal
    issued: BigDecimal
    quantityOnHand: BigDecimal
    image: String
}

input PackageInput {
    length: BigDecimal
    width: BigDecimal
    height: BigDecimal
    weight: BigDecimal
    packageType: PackageType
    shipmentId: Long
}

type SortQueue {
   id: ID
   description: String
   quantity: BigDecimal
   preallocated: BigDecimal
   price: BigDecimal
   cost: BigDecimal
   weight: BigDecimal
   image: String
   url: String
   sku: String
   shippingInstructions: String
   orderId: Long
   orderItemId: Long
   merchantId: Long
   productId: Long
   merchantId: Long
}

type PrepQueue {
   id: ID
   description: String
   quantity: BigDecimal
   unpacked: BigDecimal
   image: String
   shipmentId: Long
   productId: Long
   orderItemId: Long
   orderId: Long
}

type OutstandingQueue {
   id: ID
   description: String
   quantity: BigDecimal
   allocated: BigDecimal
   price: BigDecimal
   weight: BigDecimal
   image: String
   sku: String
   orderId: Long
   orderItemId: Long
   productId: Long
}

type ShipQueue {
   id: Long
   fullName: String
   reference: String
   total: BigDecimal
   done: BigDecimal
   todo: BigDecimal
   carrier: String
}

type ItemIssuance {
   id: ID
   shipmentId: Long
}
type ShipmentItemSummary {
    id: Int
    trackingNum: String
    total: Long
    status: String
    processed: Long
    reference: String
}

type Item {
    image: String
    description: String
    quantity: Long
}

type TrackingEventItem {
    status: String
    shipmentEventId: Int
    shipmentEventDescription: String
    createdDate: String
    details: String
    eventDate: LocalDateTime
}

type ShipmentTracking {
    content: [Item]
    progress: [TrackingEventItem]
    status: String
    type: String
    date: String
    trackingNum: String
    carrier: String
}

type ShipmentTrackingMap {
    id: Long
    shipment: ShipmentTracking
}

type TrackingEvent {
    id: Long
    name: String
}

type IncomingShipmentQueue {
    id: Long
    createdDate: String
    shipmentMethod: String
    trackingNum: String
    pkgCount: Int
    arrivedPkgs: Int
    status: String
}

input PriceInput {
    amount: BigDecimal
    currency: String
}

input PaymentInput {
    price: PriceInput
    invoiceNum: String
    userId: Long
}

type Query {
    shipments(status: [ShipmentStatus], type: ShipmentType): [Shipment]
    shipment(id: ID): Shipment
    shipmentsByRef(ref: String): [Shipment]
    sortQueue(keyword: String): [SortQueue]
    outstandingQueue(keyword: String): [OutstandingQueue]
    #shipmentItems(shipmentId: Long, isPackaged: boolean): [ShipmentItem]
    inventory: [Inventory]
    shipQueue: [ShipQueue]
    incomingShipmentQueue: [IncomingShipmentQueue]
    prepQueue(shipmentId: Long, keyword: String = ""): [PrepQueue]
    shipmentItemsByTrackingNums(trackingNums: [String]): [ShipmentItem]
    shipmentItemsCountByTrackingNums(trackingNums: [String]): [ShipmentItemSummary]
    track(ref: String): [ShipmentTrackingMap]
    trackingEvents: [TrackingEvent]
}
type Mutation {
    sendToDetrack(shipmentId: Long, orderId: Long, name: String, instructions: String, date: String, time: String, assignTo: String): Message
    createShipment(shipment: ShipmentInput): Shipment
    acceptShipment(trackingNum: String, payment: PaymentInput, invoiceLink: String): Shipment
    saveShipment(shipment: ShipmentInput): Shipment
    acceptPackage(pkg : PackageInput): Pkg
    #acceptItem(shipmentId: Long,  pkgId: Long,  purchaseItemId: Long,  productId: Long,  merchantId: Long,  description: String,  quantity: BigDecimal,  accepted: BigDecimal,  rejected: BigDecimal): Message
    acceptItem (shipmentItemId: Long,  packageId: Long, accepted: BigDecimal, rejected: BigDecimal): Message
    issueItem(orderItemId : Long, productId : Long, description : String, quantity : BigDecimal): ItemIssuance
    prepItem(dto: PackagingContentInput): Message
    processAmazonShipments: Message
    #printCode(shipmentId: Long): Message
    #savePackage(pkgId: Long, shipmentItems: [Long]): Pkg
    #scheduleShipment(id: Long, deliveryDate: LocalDate, comments: String, assignTo: String): Message
    #unAccept(shipmentAcceptanceId: Long): Message
    #unIssue(itemIssuanceId: Long) : Message
    createShipment(shipment: ShipmentInput, shipmentItems: [ShipmentItemInput], trackingNums: [String] = []): Shipment
    addItem(shipmentId: Long,  productId: Long, purchaseItemId: Long, description: String, quantity: BigDecimal): Message
    removeItem(shipmentItemId: Long): Message
    unpackItem(shipmentItemId: Long): Message
    addTrackingEvent(trackingNums: [String], shipmentStatus: ShipmentStatus,  trackingEvent: Int, eventDate: LocalDateTime, details: String): Message
    setShipmentStatus(id: Long, status:ShipmentStatus): Message
}
